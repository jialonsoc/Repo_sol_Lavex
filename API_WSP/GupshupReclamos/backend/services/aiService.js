const axios = require('axios');

// Mapeo de palabras clave a intents
const INTENT_KEYWORDS = {
  problema_monedas: [
    'moneda', 'monedas', 'no acepta', 'rechaza', 'devuelve', 'dinero',
    'pago', 'pagos', 'lector', 'efectivo', '$100', '$500', 'peso', 'pesos'
  ],
  problema_lavado: [
    'lavado', 'lavar', 'ropa', 'limpia', 'limpio', 'detergente', 'jab√≥n',
    'programa', 'ciclo', 'mancha', 'manchas', 'sucia', 'sucio'
  ],
  problema_secado: [
    'secado', 'secar', 'seca', 'humeda', 'h√∫meda', 'mojada', 'mojado',
    'centrifugado', 'centrifuga', 'temperatura', 'calor'
  ],
  problema_maquina: [
    'm√°quina', 'maquina', 'no funciona', 'rota', 'roto', 'descompuesta',
    'error', 'falla', 'traba', 'trabada', 'pantalla', 'display'
  ],
  escalamiento_humano: [
    'agente', 'persona', 'humano', 'operador', 'ayuda', 'hablar',
    'contactar', 'urgente', 'reclamo', 'queja', 'molesto', 'enojado'
  ],
  horarios_ubicacion: [
    'horario', 'horarios', 'abierto', 'cerrado', 'ubicaci√≥n', 'direcci√≥n',
    'donde', 'd√≥nde', 'cu√°ndo', 'cuando', 'hora', 'tiempo'
  ],
  consulta_precios: [
    'precio', 'precios', 'costo', 'cuesta', 'tarifa', 'valor',
    'cu√°nto', 'cuanto', 'promoci√≥n', 'descuento', 'oferta'
  ]
};

// Detectar intenci√≥n del mensaje usando palabras clave y contexto
const detectIntent = async (message, conversation = []) => {
  try {
    const messageText = message.toLowerCase().trim();
    
    // Primero intentar con la API de Gupshup (si est√° configurada)
    const gupshupIntent = await detectIntentWithGupshup(message);
    if (gupshupIntent && gupshupIntent !== 'unknown') {
      return gupshupIntent;
    }
    
    // Fallback: detecci√≥n local basada en palabras clave
    const scores = {};
    
    // Calcular puntuaci√≥n para cada intent
    Object.entries(INTENT_KEYWORDS).forEach(([intent, keywords]) => {
      scores[intent] = 0;
      
      keywords.forEach(keyword => {
        if (messageText.includes(keyword)) {
          scores[intent] += 1;
          
          // Puntuaci√≥n extra si la palabra est√° al inicio
          if (messageText.startsWith(keyword)) {
            scores[intent] += 0.5;
          }
        }
      });
    });
    
    // Considerar contexto de conversaci√≥n
    if (conversation.length > 0) {
      const lastMessages = conversation.slice(-3);
      const contextText = lastMessages.map(msg => msg.content).join(' ').toLowerCase();
      
      Object.entries(INTENT_KEYWORDS).forEach(([intent, keywords]) => {
        keywords.forEach(keyword => {
          if (contextText.includes(keyword)) {
            scores[intent] += 0.3; // Puntuaci√≥n menor por contexto
          }
        });
      });
    }
    
    // Encontrar el intent con mayor puntuaci√≥n
    const maxScore = Math.max(...Object.values(scores));
    
    if (maxScore === 0) {
      return 'consulta_general';
    }
    
    const detectedIntent = Object.keys(scores).find(intent => scores[intent] === maxScore);
    
    console.log('üéØ Intent detectado localmente:', detectedIntent, 'Score:', maxScore);
    return detectedIntent;
    
  } catch (error) {
    console.error('‚ùå Error detectando intent:', error);
    return 'consulta_general';
  }
};

// Detectar intent usando la API de Gupshup (requiere bot configurado)
const detectIntentWithGupshup = async (message) => {
  try {
    if (!process.env.GUPSHUP_BOT_ID || !process.env.GUPSHUP_API_KEY) {
      return null; // No hay bot configurado
    }
    
    const response = await axios.post('https://api.gupshup.io/sm/api/v1/bot/query', {
      query: message,
      sessionId: `intent_detection_${Date.now()}`,
      botId: process.env.GUPSHUP_BOT_ID
    }, {
      headers: {
        'apikey': process.env.GUPSHUP_API_KEY,
        'Content-Type': 'application/json'
      },
      timeout: 5000
    });
    
    return response.data?.intent || null;
    
  } catch (error) {
    // Silenciar errores de la API de Gupshup (fallback funciona)
    return null;
  }
};

// Generar respuesta autom√°tica basada en el intent
const generateResponse = async (intent, originalMessage, conversation = []) => {
  try {
    const senderName = conversation.length > 0 ? conversation[0].sender_name : '';
    const greeting = senderName ? `Hola ${senderName}! ` : 'Hola! ';
    
    switch (intent) {
      case 'problema_monedas':
        return await generateCoinProblemResponse(originalMessage, greeting);
        
      case 'problema_lavado':
        return await generateWashProblemResponse(originalMessage, greeting);
        
      case 'problema_secado':
        return await generateDryProblemResponse(originalMessage, greeting);
        
      case 'problema_maquina':
        return await generateMachineProblemResponse(originalMessage, greeting);
        
      case 'horarios_ubicacion':
        return await generateLocationInfoResponse(greeting);
        
      case 'consulta_precios':
        return await generatePricingResponse(greeting);
        
      case 'escalamiento_humano':
        return null; // Manejado directamente en el controlador
        
      default:
        return await generateGenericResponse(originalMessage, greeting);
    }
    
  } catch (error) {
    console.error('‚ùå Error generando respuesta:', error);
    return 'Disculpa, hubo un problema t√©cnico. Un agente se contactar√° contigo pronto.';
  }
};

// Respuestas espec√≠ficas por tipo de problema

const generateCoinProblemResponse = async (message, greeting) => {
  return `${greeting}Entiendo que tienes problemas con las monedas. ü™ô

Intenta estos pasos:
1Ô∏è‚É£ Verifica que las monedas est√©n limpias y sin da√±os
2Ô∏è‚É£ Inserta las monedas lentamente una por una
3Ô∏è‚É£ Verifica que uses monedas v√°lidas ($100, $500)
4Ô∏è‚É£ Si la ranura est√° obstruida, no fuerces las monedas

‚úÖ **Tip**: Las monedas muy nuevas o muy viejas a veces no son reconocidas.

Si el problema persiste, escribe "agente" para conectarte con una persona.

¬øEsto resolvi√≥ tu problema? ü§î`;
};

const generateWashProblemResponse = async (message, greeting) => {
  return `${greeting}Lamento que tengas problemas con el lavado. üß∫

Verifiquemos algunas cosas:
1Ô∏è‚É£ ¬øSeleccionaste el programa correcto para tu tipo de ropa?
2Ô∏è‚É£ ¬øUsaste la cantidad adecuada de detergente?
3Ô∏è‚É£ ¬øLa m√°quina estaba sobrecargada de ropa?
4Ô∏è‚É£ ¬øEl agua sal√≠a limpia al final del ciclo?

‚úÖ **Recomendaci√≥n**: M√°ximo 8kg de ropa por lavado.

Si necesitas ayuda personalizada, escribe "agente" para hablar con nuestro equipo.

¬øTe ayud√≥ esta informaci√≥n? üëç`;
};

const generateDryProblemResponse = async (message, greeting) => {
  return `${greeting}Veo que tienes problemas con el secado. üå™Ô∏è

Revisa estos puntos:
1Ô∏è‚É£ ¬øSeleccionaste la temperatura correcta?
2Ô∏è‚É£ ¬øLa ropa estaba muy h√∫meda al inicio?
3Ô∏è‚É£ ¬øLa m√°quina complet√≥ todo el ciclo?
4Ô∏è‚É£ ¬øEl filtro de pelusas est√° limpio?

‚úÖ **Consejo**: Para mejor secado, no sobrecargues la m√°quina.

Si el problema contin√∫a, escribe "agente" para asistencia directa.

¬øEsto te sirvi√≥? üî•`;
};

const generateMachineProblemResponse = async (message, greeting) => {
  return `${greeting}¬°Oh no! Parece que la m√°quina tiene un problema t√©cnico. üîß

Primeros pasos:
1Ô∏è‚É£ Verifica que la puerta est√© bien cerrada
2Ô∏è‚É£ Revisa si hay alg√∫n mensaje de error en pantalla
3Ô∏è‚É£ Intenta reiniciar presionando el bot√≥n de encendido
4Ô∏è‚É£ Si hay ropa dentro, NO fuerces la puerta

‚ö†Ô∏è **Importante**: Si la m√°quina tiene ropa y no abre, NO te vayas.

Voy a conectarte con un t√©cnico inmediatamente para resolver esto.

Escribe "t√©cnico" o espera un momento... üõ†Ô∏è`;
};

const generateLocationInfoResponse = async (greeting) => {
  return `${greeting}Aqu√≠ tienes la informaci√≥n que necesitas: üìç

üìç **Ubicaci√≥n**: 
[Agregar direcci√≥n de la lavander√≠a]

üïê **Horarios**:
‚Ä¢ Lunes a Viernes: 7:00 AM - 10:00 PM
‚Ä¢ S√°bados: 8:00 AM - 8:00 PM  
‚Ä¢ Domingos: 9:00 AM - 6:00 PM

üìû **Contacto**: +56 9 5829 2939

üÖøÔ∏è **Estacionamiento**: Disponible en la calle

¬øNecesitas direcciones espec√≠ficas? Escribe "ubicaci√≥n" üó∫Ô∏è`;
};

const generatePricingResponse = async (greeting) => {
  return `${greeting}Te comparto nuestros precios actuales: üí∞

üß∫ **Lavado**:
‚Ä¢ Carga peque√±a (5kg): $2.500
‚Ä¢ Carga mediana (8kg): $3.500  
‚Ä¢ Carga grande (12kg): $4.500

üå™Ô∏è **Secado**:
‚Ä¢ 30 minutos: $1.500
‚Ä¢ 45 minutos: $2.000
‚Ä¢ 60 minutos: $2.500

üí∏ **Paquetes**:
‚Ä¢ Lavado + Secado peque√±o: $3.500
‚Ä¢ Lavado + Secado mediano: $5.000

üí≥ **Formas de pago**: Efectivo (monedas) y tarjeta

¬øTe interesa alg√∫n paquete espec√≠fico? üì¶`;
};

const generateGenericResponse = async (message, greeting) => {
  return `${greeting}Gracias por contactarnos. üòä

He recibido tu mensaje y nuestro equipo lo revisar√° pronto.

**Respuestas r√°pidas**:
‚Ä¢ Escribe "monedas" para problemas de pago
‚Ä¢ Escribe "lavado" para problemas de limpieza  
‚Ä¢ Escribe "horarios" para informaci√≥n de horarios
‚Ä¢ Escribe "precios" para ver tarifas
‚Ä¢ Escribe "agente" para hablar con una persona

¬øEn qu√© m√°s puedo ayudarte? ü§ù`;
};

// Enviar respuesta autom√°tica v√≠a Gupshup
const sendAutomaticResponse = async (toNumber, message) => {
  try {
    if (!process.env.GUPSHUP_API_KEY) {
      console.log('‚ö†Ô∏è GUPSHUP_API_KEY no configurada - respuesta no enviada');
      return false;
    }

    // Limpiar n√∫mero de destino
    const cleanNumber = toNumber.replace(/^\+/, '');
    
    const messageData = new URLSearchParams({
      channel: 'whatsapp',
      source: process.env.GUPSHUP_SOURCE_NUMBER,
      destination: cleanNumber,
      'src.name': process.env.GUPSHUP_APP_NAME || 'LavanderiaBot',
      'destination.name': 'Cliente',
      message: JSON.stringify({
        type: 'text',
        text: message
      })
    });

    const response = await axios.post(
      'https://api.gupshup.io/sm/api/v1/msg',
      messageData,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'apikey': process.env.GUPSHUP_API_KEY
        },
        timeout: 10000
      }
    );
    
    console.log('ü§ñ Respuesta autom√°tica enviada:', {
      messageId: response.data.messageId,
      status: response.data.status,
      to: cleanNumber
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error enviando respuesta autom√°tica:', error.response?.data || error.message);
    return false;
  }
};

// Escalar conversaci√≥n a agente humano
const escalateToHuman = async (phoneNumber, conversationId, messageData) => {
  try {
    console.log('üë§ Escalando a agente humano:', phoneNumber);
    
    // Mensaje de escalamiento
    const escalationMessage = `Te conectar√© con un agente humano. üë®‚Äçüíº

Un miembro de nuestro equipo se pondr√° en contacto contigo en los pr√≥ximos minutos.

**Tu consulta**: "${messageData.content?.substring(0, 100)}${messageData.content?.length > 100 ? '...' : ''}"

Mientras tanto, mant√©n este chat abierto. ‚è≥`;

    // Enviar mensaje de escalamiento
    await sendAutomaticResponse(phoneNumber, escalationMessage);
    
    // Notificar al equipo (esto puede ser email, Slack, etc.)
    await notifyTeamForEscalation({
      phoneNumber,
      conversationId,
      originalMessage: messageData.content,
      senderName: messageData.senderName,
      timestamp: messageData.timestamp
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error escalando a humano:', error);
    return false;
  }
};

// Notificar al equipo sobre escalamiento (implementar seg√∫n necesidades)
const notifyTeamForEscalation = async (escalationData) => {
  try {
    // Aqu√≠ puedes implementar:
    // - Env√≠o de email al equipo
    // - Notificaci√≥n a Slack
    // - Webhook a sistema CRM
    // - etc.
    
    console.log('üö® Notificaci√≥n de escalamiento:', {
      phone: escalationData.phoneNumber,
      time: escalationData.timestamp,
      preview: escalationData.originalMessage?.substring(0, 50)
    });
    
    // Ejemplo: Log estructurado para monitoreo
    const escalationLog = {
      type: 'human_escalation',
      timestamp: new Date().toISOString(),
      customer: {
        phone: escalationData.phoneNumber,
        name: escalationData.senderName
      },
      conversation: {
        id: escalationData.conversationId,
        original_message: escalationData.originalMessage
      },
      requires_action: true
    };
    
    // En producci√≥n: enviar a sistema de monitoreo/alertas
    console.log('üìä Escalation Log:', JSON.stringify(escalationLog, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error notificando escalamiento:', error);
  }
};

// Funci√≥n para training/mejora del modelo basado en feedback
const recordFeedback = async (messageId, intent, wasHelpful) => {
  try {
    // Aqu√≠ puedes implementar l√≥gica para mejorar la detecci√≥n de intents
    // bas√°ndote en el feedback de los usuarios
    
    console.log('üìù Feedback recibido:', {
      messageId,
      intent,
      helpful: wasHelpful
    });
    
    // En producci√≥n: guardar en base de datos para an√°lisis
    
  } catch (error) {
    console.error('‚ùå Error guardando feedback:', error);
  }
};

module.exports = {
  detectIntent,
  generateResponse,
  sendAutomaticResponse,
  escalateToHuman,
  recordFeedback,
  
  // Respuestas espec√≠ficas (para testing)
  generateCoinProblemResponse,
  generateWashProblemResponse,
  generateLocationInfoResponse,
  generatePricingResponse
}; 